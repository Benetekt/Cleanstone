package rocks.cleanstone.mappinggenerator.tasks

import com.squareup.javapoet.ClassName
import com.squareup.javapoet.JavaFile
import com.squareup.javapoet.MethodSpec
import com.squareup.javapoet.TypeSpec
import org.gradle.api.tasks.TaskAction
import rocks.cleanstone.mappinggenerator.util.ItemReportTask
import javax.lang.model.element.Modifier

open class GenerateVanillaItemTypeList : ItemReportTask() {

    @TaskAction
    fun generateVanillaItemTypeList() {
        val itemList = getSortedItemList()

        val enum = TypeSpec.enumBuilder("VanillaItemType_v${getVersionString()}")
                .addModifiers(Modifier.PUBLIC)
                .addSuperinterface(ClassName.get("rocks.cleanstone.game.material.item", "ItemType"))

                .addField(String::class.java, "minecraftID", Modifier.PRIVATE, Modifier.FINAL)
                .addField(Int::class.javaPrimitiveType, "stackSize", Modifier.PRIVATE, Modifier.FINAL)
                .addMethod(MethodSpec.constructorBuilder()
                        .addParameter(String::class.java, "minecraftID")
                        .addParameter(Int::class.javaPrimitiveType, "stackSize")
                        .addStatement("this.\$N = \$N", "minecraftID", "minecraftID")
                        .addStatement("this.\$N = \$N", "stackSize", "stackSize")
                        .build())
                .addMethod(MethodSpec.constructorBuilder()
                        .addParameter(String::class.java, "minecraftID")
                        .addStatement("this(\$N, \$L)", "minecraftID", 64)
                        .build())
                .addMethod(MethodSpec.methodBuilder("getStackSize")
                        .addAnnotation(Override::class.java)
                        .addModifiers(Modifier.PUBLIC)
                        .addStatement("return \$N", "stackSize")
                        .returns(Int::class.javaPrimitiveType)
                        .build())
                .addMethod(MethodSpec.methodBuilder("rightClickAir")
                        .addAnnotation(Override::class.java)
                        .addModifiers(Modifier.PUBLIC)
                        .addParameter(ClassName.get("rocks.cleanstone.game.entity", "Entity"), "entity")
                        .addParameter(ClassName.get("rocks.cleanstone.game.inventory.item", "ItemStack"), "holding")
                        .returns(Void::class.javaPrimitiveType)
                        .build())
                .addMethod(MethodSpec.methodBuilder("rightClickBlock")
                        .addAnnotation(Override::class.java)
                        .addModifiers(Modifier.PUBLIC)
                        .addParameter(ClassName.get("rocks.cleanstone.game.entity", "Entity"), "entity")
                        .addParameter(ClassName.get("rocks.cleanstone.game.block", "Block"), "block")
                        .addParameter(ClassName.get("rocks.cleanstone.game.block", "Face"), "face")
                        .returns(Void::class.javaPrimitiveType)
                        .build())
                .addMethod(MethodSpec.methodBuilder("getID")
                        .addAnnotation(Override::class.java)
                        .addModifiers(Modifier.PUBLIC)
                        .addStatement("return \$S + \$N", "minecraft:", "minecraftID")
                        .returns(String::class.java)
                        .build())
                .addJavadoc("A list of Cleanstone's item types\n" +
                        "!! GENERATED FILE. This file was generated by gradle. !!")

        itemList.forEach { enum.addEnumConstant(it.getEnumName(), TypeSpec.anonymousClassBuilder("\$S", it.getShortName()).build()) }

        JavaFile.builder("rocks.cleanstone.endpoint.minecraft.java.v${getVersionString()}.item", enum.build())
                .skipJavaLangImports(true)
                .indent("    ")
                .build()
                .writeTo(srcRoot.toPath())
    }
}