package rocks.cleanstone.mappinggenerator.tasks

import com.beust.klaxon.JsonObject
import com.beust.klaxon.Parser
import com.squareup.javapoet.*
import org.gradle.api.tasks.TaskAction
import javax.lang.model.element.Modifier

open class GenerateVanillaItemMappings : RevisionAwareTask() {

    @TaskAction
    fun generateVanillaItemMappings() {
        val parser: Parser = Parser.default()
        val itemMapping = parser.parse(getItemReportFile().inputStream()) as JsonObject

        val itemList = ArrayList<Item>()
        itemMapping.forEach { entry ->
            val protocolID = (entry.value as JsonObject).int("protocol_id") ?: return@forEach

            itemList.add(Item(entry.key, protocolID))
        }

        itemList.sortBy { it.protocolID }

        val srcRoot = project.rootDir
                .resolve("src")
                .resolve("main")
                .resolve("java")


        getItemTypeEnum(itemList).writeTo(srcRoot.toPath())
        getProtocolMapping(itemList).writeTo(srcRoot.toPath())
    }

    private fun getVersionString(): String {
        return getRev().replace('.', '_')
    }

    private fun getItemTypeEnum(itemList: ArrayList<Item>): JavaFile {
        val enum = TypeSpec.enumBuilder("VanillaItemType")
                .addModifiers(Modifier.PUBLIC)
                .addSuperinterface(ClassName.get("rocks.cleanstone.game.material.item", "ItemType"))

                .addField(String::class.java, "minecraftID", Modifier.PRIVATE, Modifier.FINAL)
                .addField(Int::class.javaPrimitiveType, "stackSize", Modifier.PRIVATE, Modifier.FINAL)
                .addMethod(MethodSpec.constructorBuilder()
                        .addParameter(String::class.java, "minecraftID")
                        .addParameter(Int::class.javaPrimitiveType, "stackSize")
                        .addStatement("this.\$N = \$N", "minecraftID", "minecraftID")
                        .addStatement("this.\$N = \$N", "stackSize", "stackSize")
                        .build())
                .addMethod(MethodSpec.constructorBuilder()
                        .addParameter(String::class.java, "minecraftID")
                        .addStatement("this(\$N, \$L)", "minecraftID", 64)
                        .build())
                .addMethod(MethodSpec.methodBuilder("getStackSize")
                        .addAnnotation(Override::class.java)
                        .addModifiers(Modifier.PUBLIC)
                        .addStatement("return \$N", "stackSize")
                        .returns(Int::class.javaPrimitiveType)
                        .build())
                .addMethod(MethodSpec.methodBuilder("rightClickAir")
                        .addAnnotation(Override::class.java)
                        .addModifiers(Modifier.PUBLIC)
                        .addParameter(ClassName.get("rocks.cleanstone.game.entity", "Entity"), "entity")
                        .addParameter(ClassName.get("rocks.cleanstone.game.inventory.item", "ItemStack"), "holding")
                        .returns(Void::class.javaPrimitiveType)
                        .build())
                .addMethod(MethodSpec.methodBuilder("rightClickBlock")
                        .addAnnotation(Override::class.java)
                        .addModifiers(Modifier.PUBLIC)
                        .addParameter(ClassName.get("rocks.cleanstone.game.entity", "Entity"), "entity")
                        .addParameter(ClassName.get("rocks.cleanstone.game.block", "Block"), "block")
                        .addParameter(ClassName.get("rocks.cleanstone.game.block", "Face"), "face")
                        .returns(Void::class.javaPrimitiveType)
                        .build())
                .addMethod(MethodSpec.methodBuilder("getID")
                        .addAnnotation(Override::class.java)
                        .addModifiers(Modifier.PUBLIC)
                        .addStatement("return \$S + \$N", "minecraft:", "minecraftID")
                        .returns(String::class.java)
                        .build())

        itemList.forEach { enum.addEnumConstant(it.getEnumName(), TypeSpec.anonymousClassBuilder("\$S", it.getShortName()).build()) }

        enum.addJavadoc("A list of Cleanstone's item types\n" +
                "!! GENERATED FILE. This file was generated by gradle. !!")

        return JavaFile.builder("rocks.cleanstone.endpoint.minecraft.item", enum.build())
                .skipJavaLangImports(true)
                .indent("    ")
                .build()
    }

    private fun getProtocolMapping(itemList: ArrayList<Item>): JavaFile {
        val mapping = TypeSpec.classBuilder("ProtocolItemTypeMapping_v${getVersionString()}")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(
                        AnnotationSpec.builder(ClassName.get("org.springframework.stereotype", "Component"))
                                .addMember("value", "\$S", "protocolItemTypeMapping_v${getVersionString()}")
                                .build()
                )
                .superclass(ParameterizedTypeName.get(
                        ClassName.get("rocks.cleanstone.game.material.item.mapping", "SimpleItemTypeMapping"),
                        ClassName.get(Integer::class.java)
                ))

        val vanillaItemType = ClassName.get("rocks.cleanstone.endpoint.minecraft.item", "VanillaItemType")
        val constructor = MethodSpec.constructorBuilder()
                .addStatement("super(\$T.STONE)", vanillaItemType)

        itemList.forEach {
            constructor.addStatement("setID(\$T.\$L, \$L)", vanillaItemType, it.getEnumName(), it.protocolID)
        }

        mapping.addMethod(constructor.build())

        mapping.addJavadoc("Maps Cleanstone's internal item types to the Minecraft client's format\n" +
                "!! GENERATED FILE. This file was generated by gradle. !!")

        return JavaFile.builder("rocks.cleanstone.endpoint.minecraft.java.v${getVersionString()}.net.protocol", mapping.build())
                .skipJavaLangImports(true)
                .indent("    ")
                .build()
    }
}

class Item(val itemName: String, val protocolID: Int) {
    fun getEnumName(): String = getShortName().toUpperCase()
    fun getShortName(): String = itemName.split(':').last()
}